
#include <stdint.h>
#include "uart.h"
#include "gpio.h"
#include "timer.h"
#include "mac.h"

volatile uint32_t *BD0  = (uint32_t*)( MAC_BASE + 0x400 );
volatile uint32_t *BD1  = (uint32_t*)( MAC_BASE + 0x404 );
volatile uint32_t *INTS    = (uint32_t*)( MAC_BASE + 0x008 );
volatile uint32_t *TXBDNUM = (uint32_t*)( MAC_BASE + 0x020 );
volatile uint32_t *MMODER   = (uint32_t*)( MAC_BASE + 0x000 );
volatile uint32_t *PETLEN  = (uint32_t*)( MAC_BASE + 0x018 );

void macTx_Setting(){
	*TXBDNUM = 0x01;
	*MMODER = 0X2402;
	// *PETLEN = 
	*BD0 = 0x003c5800;
	*BD1 = 0x80000000;
	*INTS = 0x7f;
	*BD0 = 0x003c7800;
	*BD0 = 0x003cF800;
}


int main()
{
	// uart_init();

	print_uart("Hello World MacTx, RocketChip is now Waking Up!\r\n");

	// gpio_write( 0xfffffffa );


	uint32_t data = 0;
	volatile uint8_t* reg = (uint8_t*)(0x80002000);

	for( uint8_t i = 0; i < 60; i ++){
		*(reg + i) = i;
	}



	macTx_Setting();





	while(*BD0 != 0x003c7800);



	// eth_phy_read( 0xaa, 0x55);



	volatile uint32_t *DBG_END = (uint32_t*)( 0x60000010 );
	*DBG_END = 1;
	while(1)
	{
		;
	}
	return 0;

}

void handle_trap(void)
{

}

volatile uint32_t *MAC_MIICOMMAND = (uint32_t*)( 0x30000000U + (11 << 2) );
volatile uint32_t *MAC_MIIADDRESS = (uint32_t*)( 0x30000000U + (12 << 2) );
volatile uint32_t *MAC_MIIRX_DATA = (uint32_t*)( 0x30000000U + (14 << 2) );
volatile uint32_t *MAC_MIISTATUS  = (uint32_t*)( 0x30000000U + (15 << 2) );

void eth_phy_read( uint8_t phy_addr, uint8_t reg_addr){
	*MAC_MIIADDRESS = phy_addr | (reg_addr << 8);
	*MAC_MIICOMMAND = 0x02;

	while( *MAC_MIISTATUS && 0x2 );

	uint16_t rx_data = *MAC_MIIRX_DATA;

	if( rx_data == 0 ){
		print_uart("Done0!\r\n");		
	} else {
		print_uart("Done1!\r\n");
	}

}

